//Defining some global utility variables
var isInitiator = false;
var isStarted = false;
var isHost = false;
var localStream;
var pc;
var remoteStream;
var turnReady;
var room = null;
var video = null;
var keyStrock = null;
var mouseCords = null;
var click = null;

//Initialize turn/stun server here
//turnconfig will be defined in public/js/config.js
var pcConfig = turnConfig;

//Initializing socket.io
var socket = io.connect();

//Defining socket events

//Event - Client has created the room i.e. is the first member of the room
socket.on('host', function(room) {
  console.log('Created room ' + room);
  isInitiator = true;
  isHost = true;

  console.log("Going to find Local media");
  navigator.mediaDevices.getDisplayMedia()
  .then(gotStream)
  .catch(function(e) {
    alert('getUserMedia() error: ' + e.name);
  });

  document.getElementById("calcTitle").innerHTML = "Host";
});

//Event - Client has joined the room
socket.on('client', function(room) {
  console.log('joined: ' + room);
  document.getElementById("calcTitle").innerHTML = "Client";
  sendMessage('start', room);

  document.getElementsByTagName('body')[0].onkeyup = function(e) { 
    socket.emit('message', {type: "key", data: e.key}, room);
  }

  document.onmousemove = mouseMove
  document.onmousedown = mouseDown
  document.onmouseup = mouseUp
});

//Event - server asks to log a message
socket.on('log', function(array) {
  console.log.apply(console, array);
});


//Event - for sending meta for establishing a direct connection using WebRTC
//The Driver code
socket.on('message', function(message, room) {
    console.log('Client received message:', message,  room);
    if (message === 'start') {
      maybeStart();
    } else if (message.type === 'offer') {
      if (!isInitiator && !isStarted) {
        maybeStart();
      }
      pc.setRemoteDescription(new RTCSessionDescription(message));
      doAnswer();
    } else if (message.type === 'answer' && isStarted) {
      pc.setRemoteDescription(new RTCSessionDescription(message));
    } else if (message.type === 'candidate' && isStarted) {
      var candidate = new RTCIceCandidate({
        sdpMLineIndex: message.label,
        candidate: message.candidate
      });
      pc.addIceCandidate(candidate);
    } else if (message.type === 'key' && isStarted) {
      keyStrock.innerHTML = message.data
    } else if (message.type === 'mouse' && isStarted) {
      let coor = "(" + message.x + "," + message.y + ")";
      mouseCords.innerHTML = coor;
    } else if (message.type === 'click' && isStarted) {
      if (message.button == 0) {
        click.innerHTML = "left " + message.press
      } else if (message.button == 2) {
        click.innerHTML = "right " + message.press
      }
    } else if (message === 'bye' && isStarted) {
      handleRemoteHangup();
    }
});



//Function to send message in a room
function sendMessage(message, room) {
  console.log('Client sending message: ', message, room);
  socket.emit('message', message, room);
}

//If found local stream
function gotStream(stream) {
  console.log('Adding local stream.');
  localStream = stream;
  video.srcObject = stream;
}

//If initiator, create the peer connection
function maybeStart() {
  if (!isStarted) {
    console.log('>>>>>> creating peer connection');
    createPeerConnection();

    if (isHost == true) {
      pc.addStream(localStream);
    }

    isStarted = true;
    console.log('isInitiator', isInitiator);
    if (isInitiator) {
      doCall();
    }
  }
}

//Sending bye if user closes the window
window.onbeforeunload = function() {
  sendMessage('bye', room);
};


//Creating peer connection
function createPeerConnection() {
  try {
    pc = new RTCPeerConnection(pcConfig);
    pc.onicecandidate = handleIceCandidate;
    pc.onaddstream = handleRemoteStreamAdded;
    pc.onremovestream = handleRemoteStreamRemoved;
    console.log('Created RTCPeerConnnection');
  } catch (e) {
    console.log('Failed to create PeerConnection, exception: ' + e.message);
    alert('Cannot create RTCPeerConnection object.');
    return;
  }
}

//Function to handle Ice candidates generated by the browser
function handleIceCandidate(event) {
  console.log('icecandidate event: ', event);
  if (event.candidate) {
    sendMessage({
      type: 'candidate',
      label: event.candidate.sdpMLineIndex,
      id: event.candidate.sdpMid,
      candidate: event.candidate.candidate
    }, room);
  } else {
    console.log('End of candidates.');
  }
}

function handleCreateOfferError(event) {
  console.log('createOffer() error: ', event);
}

//Function to create offer
function doCall() {
  console.log('Sending offer to peer');
  pc.createOffer(setLocalAndSendMessage, handleCreateOfferError);
}

//Function to create answer for the received offer
function doAnswer() {
  console.log('Sending answer to peer.');
  pc.createAnswer().then(
    setLocalAndSendMessage,
    onCreateSessionDescriptionError
  );
}

//Function to set description of local media
function setLocalAndSendMessage(sessionDescription) {
  pc.setLocalDescription(sessionDescription);
  console.log('setLocalAndSendMessage sending message', sessionDescription);
  sendMessage(sessionDescription, room);
}

function onCreateSessionDescriptionError(error) {
  trace('Failed to create session description: ' + error.toString());
}

//Function to play remote stream as soon as this client receives it
function handleRemoteStreamAdded(event) {
  console.log('Remote stream added.');
  remoteStream = event.stream;
  video.srcObject = remoteStream;
}

function handleRemoteStreamRemoved(event) {
  console.log('Remote stream removed. Event: ', event);
}

function hangup() {
  console.log('Hanging up.');
  stop();
  sendMessage('bye',room);
}

function handleRemoteHangup() {
  console.log('Session terminated.');
  stop();
  isInitiator = false;
}

function stop() {
  isStarted = false;
  pc.close();
  pc = null;
}

function goFullscreen() {   
  if (video.mozRequestFullScreen) {
    video.mozRequestFullScreen();
  } else if (video.webkitRequestFullScreen) {
    video.webkitRequestFullScreen();
  }  
}

function mouseMove(e) {
  let mx = e.clientX;
  let my = e.clientY;
  socket.emit('message', {type: "mouse", x: mx, y: my}, room);
}

function mouseDown(e) {
  socket.emit('message', {type: "click", press: "down", button: e.button}, room);
}

function mouseUp(e) {
  socket.emit('message', {type: "click", press: "up", button: e.button}, room);
}

function loadStream() {
  room = prompt('Enter room name:');
  
  video = document.querySelector('#video');
  keyStrock = document.querySelector('#keyStrock');
  mouseCords = document.querySelector('#mouseCords');
  click = document.querySelector('#click');

  if (room !== '') {
    socket.emit('create or join', room);
    console.log('Attempted to create or  join room', room);
  }
}